package bgu.dcr.autogen;

import bgu.dcr.az.anop.conf.ConfigurableTypeInfo;
import bgu.dcr.az.anop.conf.Property;
import bgu.dcr.az.anop.conf.VisualData;
import bgu.dcr.az.anop.conf.impl.AbstractConfiguration;
import bgu.dcr.az.anop.conf.impl.PropertyImpl;
import bgu.dcr.az.anop.conf.impl.VisualDataImpl;
import bgu.dcr.az.anop.utils.JavaTypeParser;
import bgu.dcr.az.anop.conf.ConfigurationException;
import java.util.HashMap;
import java.util.Collection;
import java.util.Map;
import bgu.dcr.az.anop.conf.JavaDocInfo;
import bgu.dcr.az.anop.utils.JavaDocParser;



@code{  
    // SOME HELPER FUNCTIONS
    def lc(string) {
        CodeUtils.camelCaseToLowerLine(string).toUpperCase();
    }
}
public class @{className} extends AbstractConfiguration{

    public static final ConfigurableTypeInfo TYPE_INFO = JavaTypeParser.parse("@{typeInfo}");
    @foreach{p : properties}
    public static final ConfigurableTypeInfo @{lc(p.name)}_TYPE_INFO = JavaTypeParser.parse("@{p.typeFQN}");
    @end{}
    public static final JavaDocInfo JAVADOC = JavaDocParser.parse("@{escapedJavadoc}");

    public @{className}() {
        this.properties = new HashMap<>();
        
        //fill properties
        VisualData vd = null;
        @foreach{p : properties}
        vd = new VisualDataImpl("@{p.displayName}", "@{p.iconPath}", "@{p.description}");
        properties.put("@{p.name}", new PropertyImpl("@{p.name}", this, @{lc(p.name)}_TYPE_INFO , vd));
        @end{}

        this.type = TYPE_INFO;
    }

    @Override
    public Object create() throws ConfigurationException {
        @{configuredClassName} result = new @{configuredClassName}();

        configure(result);
        
        return result;
    }

    @Override
    public void configure(Object obj) throws ConfigurationException {
        @{configuredClassName} o = (@{configuredClassName}) obj;
        Property property = null;
        @foreach{p : properties}
        property = properties.get("@{p.name}");
        if (property.get() != null){
            @if{p.setter != empty}
            o.@{p.setter}( property.get().<@{p.type}>create(property.type()));
            @else{}
            if (o.@{p.getter}() == null) {
                throw new ConfigurationException(String.format("property %s doesnt have setter and no default value to fill", "@{p.name}"));
            }

            if (Collection.class.isAssignableFrom(property.type().getType())){
                Collection collection = ((Collection) (Object) o.@{p.getter}());
                collection.clear();
                collection.addAll( property.get().<Collection>create(property.type()));
            } else if (Map.class.isAssignableFrom(property.type().getType())){
                Map map = ((Map) (Object) o.@{p.getter}());
                map.clear();
                map.putAll( property.get().<Map>create(property.type()));
            } else {
                throw new ConfigurationException("does not know how to handle property @{p.name} (doesnt have setter)");
            }
            @end{}
        }
        @end{}
    }    
}

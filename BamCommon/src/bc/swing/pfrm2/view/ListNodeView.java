/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListPV.java
 *
 * Created on 11/09/2011, 15:13:09
 */
package bc.swing.pfrm2.view;

import bc.swing.dnd.ObjectTransferHandler;
import bc.swing.models.GenericListModel;
import bc.swing.pfrm.Action;
import bc.swing.pfrm.ano.ViewHints.DND;
import bc.swing.pfrm.DeltaHint;
import bc.swing.pfrm.Parameter;
import bc.swing.pfrm2.Att;
import bc.swing.pfrm2.Node;
import bc.swing.pfrm2.NodeView;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author bennyl
 */
public class ListNodeView extends javax.swing.JPanel implements NodeView {

    private GenericListModel innerModel;
    JPopupMenu pmenu;

    /** Creates new form ListPV */
    public ListNodeView() {
        initComponents();
        pmenu = new JPopupMenu();

        lst.addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent e) {
                for (FocusListener l : getFocusListeners()) {
                    l.focusGained(e);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                for (FocusListener l : getFocusListeners()) {
                    l.focusLost(e);
                }
            }
        });
    }

    private void configurePopupMenu(Node node) {
        pmenu.removeAll();
        for (final Action a : node.actionsList()) {
            pmenu.add(new AbstractAction(a.getName(), a.getIcon()) {

                public void actionPerformed(ActionEvent e) {
                    a.execute();
                }
            });
        }

        lst.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON3) {
                    return;
                }
                int p = lst.locationToIndex(e.getPoint());
                if (p >= 0) {
                    lst.getSelectionModel().setSelectionInterval(p, p);
                    pmenu.show(lst, e.getX(), e.getY());
                }
            }
        });

    }

    @Override
    public void setBackground(Color bg) {
        super.setBackground(bg);
        if (lst != null) {
            lst.setBackground(bg);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lst = new javax.swing.JList();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);

        lst.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(245, 245, 245)));
        lst.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lst);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lst;
    // End of variables declaration//GEN-END:variables

    public void reflectChangesToParam(Parameter to) {
        List tol = (List) to.getValue();
        tol.clear();
        tol.addAll(innerModel.getInnerList());
    }

    public void onChange(Parameter source, Object newValue, Object deltaHint) {
        if (deltaHint != null && deltaHint instanceof DeltaHint) {
            DeltaHint delta = (DeltaHint) deltaHint;
            List nval = (List) newValue;
            switch (delta.type) {
                case DeltaHint.LAST_ITEM_ADDED_TYPE:
                    innerModel.addLast(nval.get(nval.size() - 1));
                    break;
                case DeltaHint.ONE_ITEM_REOMVED_TYPE:
                    innerModel.remove(delta.item);
                    break;
                case DeltaHint.ONE_ITEM_CHANGED_TYPE:
                    innerModel.fireItemChanged(delta.item);
                    break;
            }
        } else if (deltaHint == null) {
            innerModel.clear();
            innerModel.fillWith((List) newValue);
//            lst.setModel(innerModel);
        }
    }

    private void setDND(final Node node) {
        if (node.getAtt(Att.USE_DND).equals(DND.DROP)) {

            lst.setDropMode(DropMode.ON_OR_INSERT);
            lst.setTransferHandler(new ObjectTransferHandler(ObjectTransferHandler.DragSupport.MOVE, true, false) {

                @Override
                protected void exportDone(Object data, JComponent source, int action) {
                }

                @Override
                public boolean importData(Object data, TransferSupport info) {
                    try {
                        JList.DropLocation dl = (JList.DropLocation) info.getDropLocation();
                        int index = dl.getIndex();

                        if (index < 0) {
                            return false;
                        }

                        GenericListModel model = (GenericListModel) lst.getModel();
                        model.add(index, node.dropFilter(data));

                        return true;

                    } catch (Exception ex) {
                        ex.printStackTrace();
                        return false;
                    }
                }

                @Override
                public Object exportData(JComponent c) {
                    return null;
                }
            });

        }
    }

    private void allowDeleteSelection() {
        lst.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                    Object[] selected = lst.getSelectedValues();
                    for (Object s : selected) {
                        innerModel.remove(s);
                    }
                }
            }
        });


    }

    public void setNode(final Node node) {
        configurePopupMenu(node);
        innerModel = new GenericListModel();

        
        
        List val = node.childrenList();

        innerModel.fillWith(val);
        lst.setModel(innerModel);

        lst.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                node.putAtt(Att.SELECTION, lst.getSelectedValue());
            }
        });
        
        if (node.getAtt(Att.USE_DND, DND.UNDEF) != DND.UNDEF) {
            setDND(node);
        }

        if (node.getBooleanAtt(Att.ALLOW_DELETE_OF_SELECTION, false)) {
            allowDeleteSelection();
        }

        final DefaultListRenderer renderer = new DefaultListRenderer();
        renderer.setModel(node);
        lst.setCellRenderer(renderer);

    }

    public void syncFromView(Node c) {
//        
    }

    public void syncToView(Node c) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }
}

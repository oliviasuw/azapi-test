/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatusScreen.java
 *
 * Created on 24/11/2011, 16:25:11
 */
package bgu.dcr.az.dev.ui;

import bc.dsl.SwingDSL;
import bc.ui.swing.listeners.Listeners;
import bc.ui.swing.visuals.Visual;
import bgu.dcr.az.api.infra.Experiment;
import bgu.dcr.az.api.infra.Round;
import bgu.dcr.az.dev.XMLConfigurator;
import bgu.dcr.az.impl.infra.ExperimentImpl;
import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author bennyl
 */
public class DebugSelectionScreen extends javax.swing.JPanel implements RoundView.DebugRequestListener {

    File problemsPath;
    List<Experiment> badExperiments;
    Map<Experiment, File> efMap;
    Listeners<DebugSelectionListener> debugListeners = Listeners.Builder.newInstance(DebugSelectionListener.class);  

    /** Creates new form StatusScreen */
    @SuppressWarnings("LeakingThisInConstructor")
    public DebugSelectionScreen() {
        initComponents();
        roundView.addDebugRequestListener(this);
    }

    void setProblemDir(File dir) {
        problemsPath = dir;
        badExperiments = new LinkedList<Experiment>();
        efMap = new HashMap<Experiment, File>();
        loadExperiments(dir);
        failList.setItems(Visual.adapt(badExperiments, new Visual.VisualGen() {

            @Override
            public Visual gen(Object it) {
                ExperimentImpl ee = (ExperimentImpl) it;
                SimpleDateFormat format = new SimpleDateFormat("dd'/'MM'/'yy' 'HH':'mm':'ss");
                return new Visual(it, format.format(new Date(Long.valueOf(ee.getFailureDebugInfo().getName()))), "", null);
            }
        }));

        failList.addSelectionListner(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                roundData.unSetData();
                if (!failList.getSelectedItems().isEmpty()) {
                    ExperimentImpl selected = (ExperimentImpl) ((Visual)failList.getSelectedItems().get(0)).getItem();
                    List<Round> rounds = selected.getRounds();
                    String roundName = selected.getFailureDebugInfo().getRoundName();

                    for (Round r : rounds) {
                        if (r.getName().equals(roundName)) {
                            roundView.setModel(r);
                            roundView.addFailureData(selected.getFailureDebugInfo());
                            roundData.setData(roundViewScroll);
                            break;
                        }
                    }
                }
            }
        });
    }

    public static void main(String[] args) {
        SwingDSL.configureUI();
        DebugSelectionScreen me = new DebugSelectionScreen();
        me.setProblemDir(new File("fail-problems"));
        SwingDSL.showInFrame(me);
    }

    private void deleteItem(Visual i) {
        Experiment e = (Experiment) i.getItem();
        File f = efMap.get(e);
        f.delete();
        efMap.remove(e);
        badExperiments.remove(e);
        failList.remove(i);
    }

    private void loadExperiments(File dir) {
        for (File f : dir.listFiles()) {
            try {
                Experiment e = XMLConfigurator.read(f);
                badExperiments.add(e);
                efMap.put(e, f);
            } catch (IOException ex) {
                Logger.getLogger(DebugSelectionScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(DebugSelectionScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(DebugSelectionScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        roundViewScroll = new javax.swing.JScrollPane();
        roundView = new bgu.dcr.az.dev.ui.RoundView();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        deleteSelected = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        failList = new bc.ui.swing.lists.StripeList();
        debugProblemButtonPan = new javax.swing.JPanel();
        jXHyperlink1 = new org.jdesktop.swingx.JXHyperlink();
        roundData = new bc.ui.swing.useful.DataPanel();

        roundViewScroll.setViewportView(roundView);

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(120, 120, 120));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBackground(new java.awt.Color(120, 120, 120));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 3));

        deleteSelected.setBackground(null);
        deleteSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/delete-selected.png"))); // NOI18N
        deleteSelected.setToolTipText("Delete the selected problems from the list");
        deleteSelected.setMinimumSize(new java.awt.Dimension(25, 25));
        deleteSelected.setOpaque(false);
        deleteSelected.setPreferredSize(new java.awt.Dimension(25, 25));
        deleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });
        jPanel11.add(deleteSelected);

        jLabel4.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Select one of the failed sessions to debug");
        jPanel11.add(jLabel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jPanel11, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        failList.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 3, new java.awt.Color(120, 120, 120)));
        failList.setMinimumSize(new java.awt.Dimension(200, 24));
        failList.setOddBackColor(new java.awt.Color(230, 230, 230));
        failList.setOddForeColor(new java.awt.Color(61, 61, 61));
        failList.setPreferredSize(new java.awt.Dimension(200, 194));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(failList, gridBagConstraints);

        debugProblemButtonPan.setBackground(new java.awt.Color(102, 102, 102));
        debugProblemButtonPan.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 0, 0, 3, new java.awt.Color(120, 120, 120)));
        debugProblemButtonPan.setLayout(new java.awt.GridBagLayout());

        jXHyperlink1.setForeground(new java.awt.Color(255, 255, 255));
        jXHyperlink1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/debug-all.png"))); // NOI18N
        jXHyperlink1.setText("Debug Full Experiment");
        jXHyperlink1.setClickedColor(new java.awt.Color(255, 255, 255));
        jXHyperlink1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jXHyperlink1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jXHyperlink1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jXHyperlink1.setUnclickedColor(new java.awt.Color(255, 255, 255));
        jXHyperlink1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXHyperlink1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        debugProblemButtonPan.add(jXHyperlink1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        jPanel3.add(debugProblemButtonPan, gridBagConstraints);

        roundData.setBackground(new java.awt.Color(153, 153, 153));
        roundData.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(roundData, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanel1.add(jPanel3, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
        for (Visual i : failList.getSelectedItems()){
            deleteItem(i);
        }
    }//GEN-LAST:event_deleteSelectedActionPerformed

    private void jXHyperlink1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXHyperlink1ActionPerformed
        debugListeners.fire().onFullExperimentDebugRequested();
    }//GEN-LAST:event_jXHyperlink1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel debugProblemButtonPan;
    private javax.swing.JButton deleteSelected;
    private bc.ui.swing.lists.StripeList failList;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private org.jdesktop.swingx.JXHyperlink jXHyperlink1;
    private bc.ui.swing.useful.DataPanel roundData;
    private bgu.dcr.az.dev.ui.RoundView roundView;
    private javax.swing.JScrollPane roundViewScroll;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onDebugRequested() {
        debugListeners.fire().onSpecificExperimentDebugRequested((Experiment)((Visual)failList.getSelectedItems().get(0)).getItem());
    }

    public Listeners<DebugSelectionListener> getDebugListeners() {
        return debugListeners;
    }
    
    
    public static interface DebugSelectionListener{
        void onFullExperimentDebugRequested();
        void onSpecificExperimentDebugRequested(Experiment exp);
    }
}

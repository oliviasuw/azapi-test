@code{
    if (!hasMethod("public static boolean accept(bgu.dcr.az.mui.ViewContainer)")){
        error("view must provide a method: 'public static boolean accept(bgu.dcr.az.mui.ViewContainer)'", this);
    }
}

package bgu.dcr.az.conf.autogen;

import bgu.dcr.az.conf.api.JavaDocInfo;
import bgu.dcr.az.conf.utils.JavaDocParser;
import bgu.dcr.az.mui.View;
import bgu.dcr.az.mui.ViewContainer;
import bgu.dcr.az.mui.ViewManipulator;
import bgu.dcr.az.mui.ViewRegistery;
import com.esotericsoftware.reflectasm.ConstructorAccess;
import bgu.dcr.az.conf.registery.RegistrationMarker;

public class @{underscoredFQN} implements ViewManipulator, RegistrationMarker{
    
    /*
    @foreach{m : methods} @{m.getFullSignature();} @end{"\n"}

    */

    //store configured class javadoc
    public static JavaDocInfo DOC = JavaDocParser.parse("@{javadoc}");

    //store accessors for fast access
    public static final ConstructorAccess CONSTRUCTOR_ACCESSOR = ConstructorAccess.get(@{getFQN()}.class);

    //registration on class loading time
    static {
        ViewRegistery.get().register(new @{underscoredFQN}(), "@{getAnnotation("bgu.dcr.az.mui.RegisterView").value}");
    }

    @Override
    public boolean accept(ViewContainer container) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public View create(ViewContainer container) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public bgu.dcr.az.metagen.util.JavaDocInfo doc() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public String toString() {
        return "@{getFQN()}";
    }
    
}
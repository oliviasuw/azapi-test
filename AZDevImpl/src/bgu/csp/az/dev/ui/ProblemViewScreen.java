/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatusScreen.java
 *
 * Created on 24/11/2011, 16:25:11
 */
package bgu.csp.az.dev.ui;

import bgu.csp.az.api.ImmutableProblem;
import java.awt.CardLayout;
import javax.swing.JTable;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author bennyl
 */
public class ProblemViewScreen extends javax.swing.JPanel {

    public static final String CONSTRAINT_MATRIX = "Constraints Matrix";

    /** Creates new form StatusScreen */
    public ProblemViewScreen(ImmutableProblem p) {
        initComponents();
        prepareTree(p);
        ((DefaultTreeCellRenderer) this.tree.getCellRenderer()).setBackgroundNonSelectionColor(null);

    }

    private void prepareTree(final ImmutableProblem p) {


        DefaultMutableTreeNode r = (DefaultMutableTreeNode) tree.getModel().getRoot();
        r.removeAllChildren();
        r.add(new DefaultMutableTreeNode(new AgentInfo(CONSTRAINT_MATRIX), true));
        loadAgents(r, p);

        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

                if (node == null) { //Nothing is selected.
                    return;
                }
                Object nodeInfo = node.getUserObject();
                DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
                if (node.isLeaf()) {
                    AgentInfo agent = (AgentInfo) nodeInfo;
                    if (agent.getName().equals(CONSTRAINT_MATRIX)) {
                        prepareAll(p);
                    } else {
                        Object parentInfo = parentNode.getUserObject();
                        AgentInfo parent = (AgentInfo) parentInfo;
                        prepareConstraints(parent.getId(), agent.getId(), p);
                    }
                } else {
                    dataPane.unSetData();
                }
            }
        });
        dataPane.unSetData();
        tree.updateUI();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        constraintsTablePane = new javax.swing.JScrollPane();
        constraintsTable = new javax.swing.JTable();
        costsTablePane = new javax.swing.JScrollPane();
        costsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        treeScroll = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        dataPane = new bc.ui.swing.useful.DataPanel();

        constraintsTablePane.setOpaque(false);

        constraintsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        constraintsTable.setOpaque(false);
        constraintsTablePane.setViewportView(constraintsTable);

        costsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        costsTablePane.setViewportView(costsTable);

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(120, 120, 120));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBackground(new java.awt.Color(120, 120, 120));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 3));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Constraints view");
        jPanel11.add(jLabel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jPanel11, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        treeScroll.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 3, new java.awt.Color(153, 153, 153)));
        treeScroll.setMinimumSize(new java.awt.Dimension(200, 22));
        treeScroll.setOpaque(false);
        treeScroll.setPreferredSize(new java.awt.Dimension(200, 322));

        tree.setBackground(new java.awt.Color(240, 240, 240));
        tree.setMinimumSize(new java.awt.Dimension(200, 0));
        tree.setOpaque(false);
        tree.setRootVisible(false);
        treeScroll.setViewportView(tree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(treeScroll, gridBagConstraints);

        dataPane.setBackground(new java.awt.Color(153, 153, 153));
        dataPane.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(dataPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanel1.add(jPanel3, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable constraintsTable;
    private javax.swing.JScrollPane constraintsTablePane;
    private javax.swing.JTable costsTable;
    private javax.swing.JScrollPane costsTablePane;
    private bc.ui.swing.useful.DataPanel dataPane;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treeScroll;
    // End of variables declaration//GEN-END:variables

    private void loadAgents(DefaultMutableTreeNode r, ImmutableProblem p) {
        int varNum = p.getNumberOfVariables();
        for (int i = 0; i < varNum; i++) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(new AgentInfo(i), true);
            for (Integer j : p.getNeighbors(i)) {
                node.add(new DefaultMutableTreeNode(new AgentInfo(j), false));
            }
            r.add(node);
        }
    }

    private void prepareAll(ImmutableProblem p) {
        int numVars = p.getNumberOfVariables();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(numVars + 1);
        model.setRowCount(numVars + 1);
        for (int i = 0; i < numVars; i++) {
            model.setValueAt(i, 0, i + 1);
        }
        for (int j = 0; j < numVars; j++) {
            model.setValueAt(j, j + 1, 0);
            for (int i = 0; i < numVars; i++) {
                if (p.isConstrained(i, j)) {
                    model.setValueAt(1, j + 1, i + 1);
                } else {
                    model.setValueAt(0, j + 1, i + 1);
                }
            }
        }
        this.constraintsTable.setModel(model);
        this.constraintsTable.setTableHeader(null);
        this.constraintsTablePane.setColumnHeaderView(null);
        this.dataPane.setData(constraintsTablePane);
        this.constraintsTable.updateUI();

    }

    private void prepareConstraints(int ai, int aj, ImmutableProblem p) {
        int domVars = p.getDomainSize(ai);
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(domVars + 1);
        model.setRowCount(domVars + 1);
        String name = "Agent " + ai + " / Agent " + aj;
        model.setValueAt(name, 0, 0);
        for (int i = 0; i < domVars; i++) {
            model.setValueAt(i, 0, i + 1);
        }
        for (int j = 0; j < domVars; j++) {
            model.setValueAt(j, j + 1, 0);
            for (int i = 0; i < domVars; i++) {
                int cost = (int) p.getConstraintCost(ai, i, aj, j);
                model.setValueAt(cost, j + 1, i + 1);
            }
        }

        this.costsTable.setModel(model);
        this.costsTable.setTableHeader(
                null);


        this.costsTablePane.setColumnHeaderView(null);
        this.dataPane.setData(costsTablePane);


        this.costsTable.updateUI();
    }

    private static class AgentInfo {

        private final String name;
        private final int id;

        public AgentInfo(int id) {
            this.id = id;
            this.name = "Agent " + id;
        }

        public AgentInfo(String name) {
            this.name = name;
            this.id = -1;
        }

        @Override
        public String toString() {
            return this.name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }
    }
}

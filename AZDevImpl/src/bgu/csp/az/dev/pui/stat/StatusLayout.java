/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestDetailsPageView.java
 *
 * Created on 15/08/2011, 09:38:27
 */
package bgu.csp.az.dev.pui.stat;

import bc.swing.pfrm.Page;
import bc.dsl.PageDSL;
import bc.swing.pfrm.BaseParamModel;
import bc.swing.pfrm.PageLayout;
import bc.swing.pfrm.FieldParamModel;
//import bgu.csp.az.dev.frm.Round;

/**
 *
 * @author bennyl
 */
public class StatusLayout extends javax.swing.JPanel implements PageLayout{
    public static final String ALGORITHM_NAME_ROLE = "ALGORITHM NAME ROLE";
    public static final String EXECUTION_STATUS_ROLE = "EXECUTION STATUS ROLE";
    public static final String EXECUTION_TIME_ROLE = "EXECUTION TIME ROLE";
    public static final String ROUNDS_ROLE = "ROUNDS ROLE";

    /** Creates new form TestDetailsPageView */
    public StatusLayout() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        roundsPan = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        algoPan = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        statusPan = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        execTimePan = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        problemInfoPan = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        nLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        problemInfoPan1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        p1Label = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        p2Label = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setBackground(new java.awt.Color(245, 245, 245));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/rounds.png"))); // NOI18N
        jLabel1.setText("Rounds");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(245, 245, 245)));
        jLabel1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        add(roundsPan, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(245, 245, 245));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/algorithm.png"))); // NOI18N
        jLabel2.setText("Executed Algorithm");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(245, 245, 245)));
        jLabel2.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel2, gridBagConstraints);

        algoPan.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        add(algoPan, gridBagConstraints);

        jLabel4.setBackground(new java.awt.Color(245, 245, 245));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/status.png"))); // NOI18N
        jLabel4.setText("Execution Status");
        jLabel4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(245, 245, 245)));
        jLabel4.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel4, gridBagConstraints);

        statusPan.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        add(statusPan, gridBagConstraints);

        jLabel6.setBackground(new java.awt.Color(245, 245, 245));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/clock.png"))); // NOI18N
        jLabel6.setText("Execution Time(sec)");
        jLabel6.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(245, 245, 245)));
        jLabel6.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel6, gridBagConstraints);

        execTimePan.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        add(execTimePan, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        problemInfoPan.setBackground(new java.awt.Color(230, 230, 230));
        problemInfoPan.setOpaque(false);
        problemInfoPan.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("[Number of Variables =");
        problemInfoPan.add(jLabel3);

        nLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        nLabel.setForeground(new java.awt.Color(0, 51, 255));
        nLabel.setText("N");
        problemInfoPan.add(nLabel);

        jLabel5.setText("]");
        problemInfoPan.add(jLabel5);

        jLabel7.setText("[Domain Size =");
        problemInfoPan.add(jLabel7);

        dLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        dLabel.setForeground(new java.awt.Color(0, 51, 255));
        dLabel.setText("D");
        problemInfoPan.add(dLabel);

        jLabel8.setText("]");
        problemInfoPan.add(jLabel8);

        jLabel9.setText("[Max Cost =");
        problemInfoPan.add(jLabel9);

        cLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        cLabel.setForeground(new java.awt.Color(0, 51, 255));
        cLabel.setText("C");
        problemInfoPan.add(cLabel);

        jLabel10.setText("]");
        problemInfoPan.add(jLabel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(problemInfoPan, gridBagConstraints);

        problemInfoPan1.setBackground(new java.awt.Color(230, 230, 230));
        problemInfoPan1.setOpaque(false);
        problemInfoPan1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel11.setText("[Probability Of Constraint Between Two Variables =");
        problemInfoPan1.add(jLabel11);

        p1Label.setFont(new java.awt.Font("Tahoma", 1, 11));
        p1Label.setForeground(new java.awt.Color(0, 51, 255));
        p1Label.setText("P1");
        problemInfoPan1.add(p1Label);

        jLabel12.setText("]");
        problemInfoPan1.add(jLabel12);

        jLabel13.setText("[Probability Of Conflict Between Two Constraint Variables =");
        problemInfoPan1.add(jLabel13);

        p2Label.setFont(new java.awt.Font("Tahoma", 1, 11));
        p2Label.setForeground(new java.awt.Color(0, 51, 255));
        p2Label.setText("Loop: 0.1 -> 0.9");
        problemInfoPan1.add(p2Label);

        jLabel14.setText("]");
        problemInfoPan1.add(jLabel14);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(problemInfoPan1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel1, gridBagConstraints);

        jLabel15.setBackground(new java.awt.Color(245, 245, 245));
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/gnome-glchess.png"))); // NOI18N
        jLabel15.setText("current Round");
        jLabel15.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(245, 245, 245)));
        jLabel15.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel15, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel algoPan;
    private javax.swing.JLabel cLabel;
    private javax.swing.JLabel dLabel;
    private javax.swing.JPanel execTimePan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel nLabel;
    private javax.swing.JLabel p1Label;
    private javax.swing.JLabel p2Label;
    private javax.swing.JPanel problemInfoPan;
    private javax.swing.JPanel problemInfoPan1;
    private javax.swing.JPanel roundsPan;
    private javax.swing.JPanel statusPan;
    // End of variables declaration//GEN-END:variables


//    public void changeRound(Round round) {
//        if (round != null) {
//            nLabel.setText("" + round.getNumberOfVariables());
//            dLabel.setText("" + round.getDomainSize());
//            p1Label.setText("" + round.getP1());
//            cLabel.setText("" + round.getMaxCost());
//        }
//    }

    @Override
    public void setPage(Page page) {
        PageDSL.fillByRole(page, roundsPan, ROUNDS_ROLE);
        PageDSL.fillByRole(page, execTimePan, EXECUTION_TIME_ROLE);
        PageDSL.fillByRole(page, algoPan, ALGORITHM_NAME_ROLE);
        PageDSL.fillByRole(page, statusPan, EXECUTION_STATUS_ROLE);
        
        //current Execution
//        BaseParamModel rp = page.getParam(StatusModel.CURRENT_ROUND_PARAM);
//        rp.addChangeListener(new FieldParamModel.ChangeListener() {
//
//            @Override
//            public void onChange(BaseParamModel source, Object newValue, Object deltaHint) {
//                changeRound((Round)newValue);
//            }
//        });
//        
//        changeRound((Round)rp.getValue());
    }

    @Override
    public void onDispose() {
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Console.java
 *
 * Created on 27/10/2011, 12:44:24
 */
package bgu.csp.az.dev.ui;

//import bc.dsl.PageDSL;
import bgu.csp.az.dev.pui.*;
import bc.swing.models.BatchDocument;
import bc.swing.pfrm.Parameter;
import bc.swing.pfrm.Model;
//import bc.swing.pfrm.ParamView;
import bc.swing.pfrm.ano.PageDef;
import bc.utils.PokedWorker;
import bgu.csp.az.api.infra.Experiment;
import bgu.csp.az.dev.ExecutionUnit;
import bgu.csp.az.impl.infra.LogListener;
import java.awt.Color;
import java.util.AbstractMap.SimpleEntry;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author bennyl
 */
public class LogScreen extends javax.swing.JPanel implements LogListener {

    private Scanner sc = null;
    private AgentLogDocument doc;
    private int offset = 0;
    private String lastSearch = "";
    private PokedWorker pw;

    /** Creates new form Console */
    public LogScreen() {
        initComponents();
        output.setEditorKit(new StyledEditorKit());
        searchTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                output.getHighlighter().removeAllHighlights();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                output.getHighlighter().removeAllHighlights();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                output.getHighlighter().removeAllHighlights();
            }
        });

        outScroll.getViewport().setOpaque(false);

    }

    private void highLightText(Highlighter highlighter, SimpleEntry<Integer, Integer> place) {
        offset = output.getCaretPosition();
        Highlighter.HighlightPainter myHighlightPainter = new DefaultHighlighter.DefaultHighlightPainter(new Color(0,102,255));
        try {
            highlighter.addHighlight(offset + place.getKey(),
                    offset + place.getValue(),
                    myHighlightPainter);
            offset = offset + place.getValue();
            output.moveCaretPosition(offset);
        } catch (BadLocationException ex) {
            Logger.getLogger(LogScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        nextMatch = new javax.swing.JButton();
        ragexCheckBox = new javax.swing.JCheckBox();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        outScroll = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(0, 0, 0));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        setPreferredSize(new java.awt.Dimension(200, 150));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        searchLabel.setFont(new java.awt.Font("Consolas", 1, 12));
        searchLabel.setForeground(new java.awt.Color(255, 255, 255));
        searchLabel.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(searchLabel, gridBagConstraints);

        searchLabel1.setBackground(new java.awt.Color(226, 225, 225));
        searchLabel1.setFont(new java.awt.Font("Consolas", 1, 12));
        searchLabel1.setForeground(new java.awt.Color(102, 102, 102));
        searchLabel1.setText("?> ");
        searchLabel1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel1.add(searchLabel1, gridBagConstraints);

        searchTextField.setBackground(new java.awt.Color(226, 225, 225));
        searchTextField.setFont(new java.awt.Font("Consolas", 1, 12));
        searchTextField.setForeground(new java.awt.Color(102, 102, 102));
        searchTextField.setBorder(null);
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(searchTextField, gridBagConstraints);

        nextMatch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/magnifier--arrow.png"))); // NOI18N
        nextMatch.setText("Next");
        nextMatch.setOpaque(false);
        nextMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMatchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(nextMatch, gridBagConstraints);

        ragexCheckBox.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        ragexCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        ragexCheckBox.setText("Regex");
        ragexCheckBox.setActionCommand("Regex");
        ragexCheckBox.setBorder(null);
        ragexCheckBox.setOpaque(false);
        jPanel1.add(ragexCheckBox, new java.awt.GridBagConstraints());

        matchCaseCheckBox.setFont(new java.awt.Font("Consolas", 0, 11));
        matchCaseCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        matchCaseCheckBox.setText("Match Case");
        matchCaseCheckBox.setOpaque(false);
        matchCaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchCaseCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(matchCaseCheckBox, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        outScroll.setBorder(null);
        outScroll.setOpaque(false);
        outScroll.setPreferredSize(new java.awt.Dimension(32, 50));

        output.setBackground(new java.awt.Color(0, 0, 0));
        output.setFont(new java.awt.Font("Consolas", 0, 14));
        output.setForeground(new java.awt.Color(51, 255, 0));
        output.setText("bla");
        outScroll.setViewportView(output);

        add(outScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private boolean search() {
        Highlighter highlighter = output.getHighlighter();
        if (!this.searchTextField.getText().equals(this.lastSearch)) {
            highlighter.removeAllHighlights();
        }
        this.lastSearch = this.searchTextField.getText();
        offset = output.getCaretPosition();
        SimpleEntry<Integer, Integer> place = doc.search(this.searchTextField.getText(), this.ragexCheckBox.isSelected(), this.matchCaseCheckBox.isSelected(), offset);
        highlighter.removeAllHighlights();
        if (place.getKey() == -1) {
            output.setCaretPosition(0);
            return true;
        }
        highLightText(highlighter, place);
        return false;
    }

private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        search();
}//GEN-LAST:event_searchTextFieldActionPerformed


private void nextMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMatchActionPerformed
        search();
}//GEN-LAST:event_nextMatchActionPerformed

private void matchCaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchCaseCheckBoxActionPerformed

}//GEN-LAST:event_matchCaseCheckBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JButton nextMatch;
    private javax.swing.JScrollPane outScroll;
    private javax.swing.JTextPane output;
    private javax.swing.JCheckBox ragexCheckBox;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel searchLabel1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

//    @Override
    public void setModel(Experiment experiment) {
        doc = new AgentLogDocument();
        doc.addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                output.setCaretPosition(doc.getLength());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
        output.setDocument(doc);
        ExecutionUnit.UNIT.setLogListener(this);
        pw = new PokedWorker(100) {

            @Override
            public void work() {
                try {
                    doc.processBatchUpdates();

                } catch (BadLocationException ex) {
                    Logger.getLogger(UIController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new Thread(pw).start();

    }

//    @Override
    public void reflectChangesToParam(Parameter to) {
    }

//    @Override
    public void onChange(Parameter source, Object newValue, Object deltaHint) {
    }

    @Override
    public void onLog(int agent, String mailGroupKey, String log) {
        final String lname = "[" + mailGroupKey.substring(mailGroupKey.lastIndexOf(".") + 1) + "] " + agent;
        doc.addLog(lname, log, Level.INFO);
        pw.poke();
    }

    @PageDef
    public static class TestModel extends Model {

        BatchDocument b = new AgentLogDocument();

        public TestModel() {
        }

//        @Param(name = "console", customView = Console.class)
        public BatchDocument getBatchdoc() {

            return b;
        }
    }

    public static void main(String[] args) {

        TestModel tm = new TestModel();
//        PageDSL.showInFrame(tm);

    }
}

package bgu.dcr.autogen;

import bgu.dcr.az.anop.conf.ConfigurableTypeInfo;
import bgu.dcr.az.anop.conf.Property;
import bgu.dcr.az.anop.conf.VisualData;
import bgu.dcr.az.anop.conf.impl.AbstractConfiguration;
import bgu.dcr.az.anop.conf.impl.PropertyImpl;
import bgu.dcr.az.anop.conf.impl.VisualDataImpl;
import bgu.dcr.az.anop.utils.JavaTypeParser;
import java.util.HashMap;

@code{  
    // SOME HELPER FUNCTIONS
    def lc(string) {
        CodeUtils.camelCaseToLowerLine(string).toUpperCase();
    }
}
public class @{className} extends AbstractConfiguration{

    public static final ConfigurableTypeInfo TYPE_INFO = JavaTypeParser.parse("@{typeInfo}");
    @foreach{p : properties}
    public static final ConfigurableTypeInfo @{lc(p.name)}_TYPE_INFO = JavaTypeParser.parse("@{p.typeInfo.toString()}");
    @end{}

    public @{className}() {
        this.properties = new HashMap<>();
        
        //fill properties
        VisualData vd = null;
        @foreach{p : properties}
        vd = new VisualDataImpl("@{p.displayName}", "@{p.iconPath}", "@{p.description}");
        properties.put("@{p.name}", new PropertyImpl("@{p.name}", this, @{lc(p.name)}_TYPE_INFO , vd));
        @end{}

        this.type = TYPE_INFO;
    }

    @Override
    public Object create() {
        @{configuredClassName} result = new @{configuredClassName}();

        configure(result);
        
        return result;
    }

    private void configure(@{configuredClassName} o) {
        Property property = null;
        @foreach{p : properties}
        property = properties.get("@{p.name}");
        if (property.get() != null){
        @if{p.type.isBasic()}
            o.@{p.setter}( property.get().<@{p.typeInfo.getType().getCanonicalName()}>create());
        @else{p.type.isCollection()}
            //o.@{p.getter}().clear();
            o.@{p.getter}().addAll( property.get().<@{p.typeInfo.getType().getCanonicalName()}>create());
        @else{p.type.isMap()}
            //o.@{p.getter}().clear();
            o.@{p.getter}().putAll( property.get().<@{p.typeInfo.getType().getCanonicalName()}>create());
        @end{}
        }
        @end{}
    }    
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatusScreen.java
 *
 * Created on 24/11/2011, 16:25:11
 */
package bgu.csp.az.dev.ui;

import bc.dsl.SwingDSL;
import bc.ui.swing.trees.IconProvider;
import bgu.csp.az.api.ImmutableProblem;
import bgu.csp.az.impl.pgen.MapProblem;
import bgu.csp.az.impl.pgen.UnstructuredDCOPGen;
import java.util.Random;
import javax.swing.Icon;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author bennyl
 */
public class ProblemViewScreen extends javax.swing.JPanel {

    public static final String CONSTRAINT_MATRIX = "Constraints Matrix";

    /** Creates new form StatusScreen */
    public ProblemViewScreen(ImmutableProblem p) {
        initComponents();
        prepareTree(p);
        tree.setIconProvider(new IconProvider() {

            private Icon AGENT1_ICON = SwingDSL.resIcon("agent1");
            private Icon AGENT2_ICON = SwingDSL.resIcon("agent2");
            private Icon ALL_ICON = SwingDSL.resIcon("all-constraints");

            @Override
            public Icon provideFor(Object item) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) item;
                if (node.isLeaf()) {
                    if (((AgentInfo) node.getUserObject()).getName().equals(CONSTRAINT_MATRIX)) {
                        return ALL_ICON;
                    } else {
                        return AGENT2_ICON;
                    }
                } else {
                    return AGENT1_ICON;
                }
            }
        });

    }

    private void prepareTree(final ImmutableProblem p) {


        DefaultMutableTreeNode r = (DefaultMutableTreeNode) tree.getModel().getRoot();
        r.removeAllChildren();
        final DefaultMutableTreeNode node = new DefaultMutableTreeNode(new AgentInfo(CONSTRAINT_MATRIX), true);
        r.add(node);
        loadAgents(r, p);

        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

                if (node == null) { //Nothing is selected.
                    return;
                }
                Object nodeInfo = node.getUserObject();
                DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
                if (node.isLeaf()) {
                    AgentInfo agent = (AgentInfo) nodeInfo;
                    if (agent.getName().equals(CONSTRAINT_MATRIX)) {
                        prepareAll(p);
                    } else if (parentNode == tree.getModel().getRoot()) {
                        dataPane.unSetData();
                    } else {

                        Object parentInfo = parentNode.getUserObject();
                        AgentInfo parent = (AgentInfo) parentInfo;
                        prepareConstraints(parent.getId(), agent.getId(), p);
                    }
                } else {
                    dataPane.unSetData();
                }
            }
        });
        dataPane.unSetData();
        tree.updateUI();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        constraintsTable = new bc.ui.swing.tables.ConstraintTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        tree = new bc.ui.swing.trees.ScrollableStripeTree();
        dataPane = new bc.ui.swing.useful.DataPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        searchLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(120, 120, 120));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBackground(new java.awt.Color(120, 120, 120));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 3));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Constraints view");
        jPanel11.add(jLabel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jPanel11, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        tree.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 3, new java.awt.Color(102, 102, 102)));
        tree.setMinimumSize(new java.awt.Dimension(200, 22));
        tree.setPreferredSize(new java.awt.Dimension(200, 440));
        tree.setRootVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(tree, gridBagConstraints);

        dataPane.setBackground(new java.awt.Color(153, 153, 153));
        dataPane.setForeground(new java.awt.Color(255, 255, 255));
        dataPane.setNoDataForeColor(new java.awt.Color(255, 255, 255));
        dataPane.setNoDataText("No Constraint Table To Show");
        dataPane.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(dataPane, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(189, 188, 188));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 0, 3, 3, new java.awt.Color(102, 102, 102)));
        jPanel2.setMinimumSize(new java.awt.Dimension(10, 200));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 200));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(null);

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Consolas", 1, 12));
        jTextArea1.setForeground(new java.awt.Color(51, 255, 0));
        jTextArea1.setRows(5);
        jTextArea1.setText("Hello World\nThis is the next line");
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        searchLabel1.setBackground(new java.awt.Color(226, 225, 225));
        searchLabel1.setFont(new java.awt.Font("Consolas", 1, 12));
        searchLabel1.setForeground(new java.awt.Color(102, 102, 102));
        searchLabel1.setText("?> ");
        searchLabel1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel4.add(searchLabel1, gridBagConstraints);

        searchTextField.setBackground(new java.awt.Color(226, 225, 225));
        searchTextField.setFont(new java.awt.Font("Consolas", 1, 12));
        searchTextField.setForeground(new java.awt.Color(102, 102, 102));
        searchTextField.setBorder(null);
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel4.add(searchTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanel1.add(jPanel3, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        
}//GEN-LAST:event_searchTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private bc.ui.swing.tables.ConstraintTable constraintsTable;
    private bc.ui.swing.useful.DataPanel dataPane;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel searchLabel1;
    private javax.swing.JTextField searchTextField;
    private bc.ui.swing.trees.ScrollableStripeTree tree;
    // End of variables declaration//GEN-END:variables

    private void loadAgents(DefaultMutableTreeNode r, ImmutableProblem p) {
        int varNum = p.getNumberOfVariables();
        for (int i = 0; i < varNum; i++) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(new AgentInfo(i), true);
            for (Integer j : p.getNeighbors(i)) {
                node.add(new DefaultMutableTreeNode(new AgentInfo(j), false));
            }
            r.add(node);
        }
    }

    private void prepareAll(ImmutableProblem p) {
        int numVars = p.getNumberOfVariables();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(numVars + 1);
        model.setRowCount(numVars + 1);
        for (int i = 0; i < numVars; i++) {
            model.setValueAt(i, 0, i + 1);
        }
        for (int j = 0; j < numVars; j++) {
            model.setValueAt(j, j + 1, 0);
            for (int i = 0; i < numVars; i++) {
                if (p.isConstrained(i, j)) {
                    model.setValueAt(1, j + 1, i + 1);
                } else {
                    model.setValueAt(0, j + 1, i + 1);
                }
            }
        }
        this.constraintsTable.getTable().setModel(model);
        this.constraintsTable.getTable().setTableHeader(null);
//        this.constraintsTablePane.setColumnHeaderView(null);
        this.dataPane.setData(constraintsTable);
        this.constraintsTable.updateUI();

    }

    private void prepareConstraints(int ai, int aj, ImmutableProblem p) {
        int domVars = p.getDomainSize(ai);
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(domVars + 1);
        model.setRowCount(domVars + 1);
        String name = "" + ai + " / " + aj;
        model.setValueAt(name, 0, 0);
        for (int i = 0; i < domVars; i++) {
            model.setValueAt(i, 0, i + 1);
        }
        for (int j = 0; j < domVars; j++) {
            model.setValueAt(j, j + 1, 0);
            for (int i = 0; i < domVars; i++) {
                int cost = (int) p.getConstraintCost(ai, i, aj, j);
                model.setValueAt(cost, j + 1, i + 1);
            }
        }

        this.constraintsTable.getTable().setModel(model);
        this.constraintsTable.getTable().setTableHeader(
                null);


//        this.constraintsTable.setColumnHeaderView(null);
        this.dataPane.setData(constraintsTable);


        this.constraintsTable.getTable().updateUI();
    }

    public static void main(String[] args) {
        MapProblem p = new MapProblem();
        final UnstructuredDCOPGen gen = new UnstructuredDCOPGen();
        gen.bubbleDownVariable("n", 12);
        gen.bubbleDownVariable("d", 7);
        gen.generate(p, new Random());
        SwingDSL.configureUI();
        SwingDSL.showInFrame(new ProblemViewScreen(p));
    }

    private static class AgentInfo {

        private final String name;
        private final int id;

        public AgentInfo(int id) {
            this.id = id;
            this.name = "Agent " + id;
        }

        public AgentInfo(String name) {
            this.name = name;
            this.id = -1;
        }

        @Override
        public String toString() {
            return this.name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }
    }
}
